#+title: Emacs Literate Config
#+author: Teia Leusten
#+description: Teia Leusten's personal Emacs config.
#+startup: overview
#+options: toc:2

* TABLE OF CONTENTS :toc:
:PROPERTIES:
:auto-expand: body
:END:
- [[#package-manager][PACKAGE MANAGER]]
  - [[#install-elpaca][Install elpaca]]
  - [[#enable-use-package-support][Enable use-package support]]
  - [[#use--hook-suffix][Use ~-hook~ suffix]]
- [[#general][GENERAL]]
- [[#basics][BASICS]]
  - [[#identity][Identity]]
  - [[#directories][Directories]]
- [[#code][CODE]]
  - [[#rainbow-delimiters][Rainbow delimiters]]
- [[#dashboard][DASHBOARD]]
- [[#denote][DENOTE]]
  - [[#install-denote][Install denote]]
  - [[#add-denote-exploration-menu][Add denote exploration menu]]
  - [[#define-front-matter][Define front matter]]
  - [[#define-templates][Define templates]]
  - [[#set-up-org-capture-templates][Set up org capture templates]]
- [[#emacs][EMACS]]
  - [[#backups][Backups]]
  - [[#customize][Customize]]
  - [[#encoding][Encoding]]
  - [[#exit-emacs-without-confirmations][Exit Emacs without confirmations]]
- [[#evil][EVIL]]
- [[#completions][COMPLETIONS]]
  - [[#vertico][Vertico]]
- [[#fonts][FONTS]]
  - [[#defining-font-faces][Defining font faces]]
  - [[#zooming-inout][Zooming in/out]]
- [[#icons][ICONS]]
- [[#modeline][MODELINE]]
- [[#org-mode][ORG MODE]]
  - [[#enable-indent-mode][Enable indent mode]]
  - [[#enable-table-of-contents][Enable table of contents]]
  - [[#states][states]]
  - [[#qol-improvements][QoL improvements]]
- [[#shell][SHELL]]
- [[#sudo][SUDO]]
- [[#theming][THEMING]]
- [[#user-interface][USER INTERFACE]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable menubar, toolbars, and scrollbars]]
  - [[#disable-sound][Disable sound]]
  - [[#display-line-numbers-and-truncated-lines][Display line numbers and truncated lines]]
  - [[#specify-emacs-frame-size-and-position][Specify Emacs frame size and position]]
  - [[#remove-title-bar][Remove title bar]]
  - [[#enable-transparency][Enable transparency]]
  - [[#add-small-margins-around-the-frame][Add small margins around the frame]]
  - [[#enable-hl-line-mode][Enable hl-line-mode]]
- [[#which-key][WHICH-KEY]]

* PACKAGE MANAGER
We are going to use Elpaca instead of straight for one simple reason - speed.

** Install elpaca
First, let's install Elpaca. This following snippet is taken directly from the Elpaca [[https://github.com/progfolio/elpaca][github]].

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.11)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1 :inherit ignore
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (<= emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

** Enable use-package support
It is just more convenient to use ~use-package~ declarations, since allmost all package recipes provide them.

#+begin_src emacs-lisp
  (elpaca elpaca-use-package
    (elpaca-use-package-mode))
#+end_src

** Use ~-hook~ suffix
One unfortunate thing about ~use-package~ is that it hides the ~-hook~ suffix in ~:hook~ sections. It can become very confusing figuring out what is going one. Clear is better than clever.

#+begin_src emacs-lisp
(setopt use-package-hook-name-suffix nil)
#+end_src

* GENERAL
General and its keybindings. The keybindings here are of the leader-type. Everything else related to particular packages is defined in the respecitive ~use-package~ block and usually uses Emacs-style prefixes.

#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :demand t
    :config
    (general-evil-setup t)

    ;; Set up ',' as the global leader key
    (general-create-definer tl/leader
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix ","
      :global-prefix "M-,")

    ;; Apropos
    (tl/leader
     "a" '(:ignore t :wk "apropos")
     "a a" '(apropos :wk "apropos all")
     "a c" '(apropos-command :wk "apropos command")
     "a d" '(apropos-documentation :wk "apropos docstring")
     "a l" '(apropos-library :wk "apropos in library")
     "a v" '(apropos-value :wk "apropos by value"))

    ;; Buffers
    (tl/leader
     "b" '(:ignore t :wk "buffer")
     "b b" '(switch-to-buffer :wk "switch to buffer")
     "b i" '(ibuffer :wk "ibuffer")
     "b k" '(kill-current-buffer :wk "kill buffer")
     "b n" '(next-buffer :wk "next buffer")
     "b p" '(previous-buffer :wk "previous buffer")
     "b r" '(revert-buffer :wk "revert buffer"))

    ;; Evaluation
    (tl/leader
     "e" '(:ignore t :wk "evaluate")
     "e b" '(eval-buffer :wk "eval buffer")
     "e d" '(eval-defun :wk "eval defun")
     "e e" '(eval-expression :wk "eval expession")
     "e l" '(eval-last-sexp :wk "eval expression before point")
     "e r" '(eval-region :wk "eval region"))

    ;; Files
    (tl/leader
     "." '(find-file :wk "find file")
     "f" '(:ignore t :wk "files")
     "f c" '(:ignore t :wk "config")
     "f c c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "config.org")
     "f c i" '((lambda () (interactive) (find-file "~/.config/emacs/init.el")) :wk "init.el")
     "f c e" '((lambda () (interactive) (find-file "~/.config/emacs/early-init.el")) :wk "early-init.el")
     "f c r" '((lambda ()
  	       (interactive)
  	       (load-file "~/.config/emacs/init.el"))
  	     :wk "reload config"))

    ;; Help
    (tl/leader
     "h" '(:ignore t :wk "help")
     "h f" '(describe-function :wk "describe function")
     "h v" '(describe-variable :wk "describe variable")
     "h m" '(describe-mode :wk "describe mode")
     "h c" '(describe-command :wk "describe command")
     "h k" '(describe-key :wk "describe key"))

    ;; Shells
    (tl/leader
     "s" '(:ignore t :wk "shell")
     "s s" '(eshell :wk "eshell"))

    ;; Toggles
    (tl/leader
     "t" '(:ignore t :wk "toggle")
     "t l" '(display-line-numbers-mode :wk "line numbers")
     "t r" '(visual-line-mode :wk "truncated lines")
     "t t" '(org-tidy-toggle :wk "org property drawers"))

    ;; Windows
    (tl/leader
     "w" '(:ignore t :wk "windows")
     ;; Window splits
     "w c" '(evil-window-delete :wk "close window")
     "w n" '(evil-window-new :wk "new window")
     "w s" '(evil-window-split :wk "horizontal split")
     "w v" '(evil-window-vsplit :wk "vertical split")
     ;; Window motions
     "w h" '(evil-window-left :wk "window left")
     "w j" '(evil-window-down :wk "window down")
     "w k" '(evil-window-up :wk "window up")
     "w l" '(evil-window-right :wk "window right")
     "w w" '(evil-window-next :wk "goto next window")))
#+end_src

* BASICS
Basic configuration, used by other packages. This includes personal information, folders etc.

** Identity
Identity information used by some programs like GPG and mail clients.

#+begin_src emacs-lisp
(setq user-full-name "Teia Lesuten")
(setq user-mail-address "teia.leusten@proton.me")
#+end_src

** Directories
Various directories used by the system.

#+begin_src emacs-lisp
  (defvar tl/org-path "~/Forge/teial/"
    "Directory for org notes.")

  (defvar tl/org-journal-path (file-name-concat tl/org-path "journal/")
    "Subdirectory for my journal.")

  (defvar tl/org-projects-path (file-name-concat tl/org-path "projects/")
    "Subdirectory for project notes.")

  (defvar tl/org-areas-path (file-name-concat tl/org-path "areas/")
    "Subdirectory for area notes.")

  (defvar tl/org-skills-path (file-name-concat tl/org-path "skills/")
    "Subdirectory for skill notes.")

  (defvar tl/org-garden-path (file-name-concat tl/org-path "garden/")
    "Subdirectory for my digital garden notes.")

  (defvar tl/org-languages-path (file-name-concat tl/org-path "languages/")
    "Subdirectory for my language learning notes.")

  (defvar tl/org-resources-path (file-name-concat tl/org-path "resources/")
    "Subdirectory for resouces.")
#+end_src

* CODE
** Rainbow delimiters
Visually matched delimiters.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :defer t
    :hook
    (prog-mode . rainbow-delimiters-mode)
    (org-mode . rainbow-delimiters-mode))
#+end_src

* DASHBOARD
Add some usefullness on startup.

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :after nerd-icons
    :config
    (setq dashboard-center-content t
          dashboard-vertically-center-content t
          dashboard-vertically-center-content t
          dashboard-icon-type 'nerd-icons)
    (setq dashboard-startupify-list
  	'(dashboard-insert-banner-title
            dashboard-insert-newline
            dashboard-insert-navigator
            dashboard-insert-newline
            dashboard-insert-init-info
            dashboard-insert-items))
    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
    (dashboard-setup-startup-hook))
#+end_src

* DENOTE
This is your digital garden.

** Install denote
Install Denote package.

#+begin_src emacs-lisp
  (use-package denote
    :ensure t
    :hook (dired-mode . denote-dired-mode)
    :bind
    (:map global-map
      ("C-c n n" . denote)
      ("C-c n s" . denote-subdirectory)
      ("C-c n d" . denote-dired)
      ("C-c n g" . denote-grep)
      ;; If you intend to use Denote with a variety of file types, it is
      ;; easier to bind the link-related commands to the `global-map', as
      ;; shown here.  Otherwise follow the same pattern for `org-mode-map',
      ;; `markdown-mode-map', and/or `text-mode-map'.
      ("C-c n l" . denote-link)
      ("C-c n L" . denote-add-links)
      ("C-c n b" . denote-backlinks)
      ("C-c n q c" . denote-query-contents-link) ; create link that triggers a grep
      ("C-c n q f" . denote-query-filenames-link) ; create link that triggers a dired
      ;; Note that `denote-rename-file' can work from any context, not just
      ;; Dired bufffers.  That is why we bind it here to the `global-map'.
      ("C-c n r" . denote-rename-file)
      ("C-c n R" . denote-rename-file-using-front-matter)

      ;; Key bindings specifically for Dired.
      :map dired-mode-map
      ("C-c C-d C-i" . denote-dired-link-marked-notes)
      ("C-c C-d C-r" . denote-dired-rename-files)
      ("C-c C-d C-k" . denote-dired-rename-marked-files-with-keywords)
      ("C-c C-d C-R" . denote-dired-rename-marked-files-using-front-matter))

    :config
    (setq denote-directory (expand-file-name "~/Forge/teial/"))
    (setq denote-save-buffers nil)
    (setq denote-known-keywords '("journal", "book" "course" "video" "project" "area" "skill" "idea"))
    (setq denote-infer-keywords t)
    (setq denote-sort-keywords t)
    (setq denote-prompts '(title keywords))
    (setq denote-excluded-directories-regexp nil)
    (setq denote-excluded-keywords-regexp nil)
    (setq denote-rename-confirmations '(rewrite-front-matter modify-file-name))
    ;; Pick dates, where relevant, with Org's advanced interface:
    (setq denote-date-prompt-use-org-read-date t)
    ;; Automatically rename Denote buffers using the `denote-rename-buffer-format'.
    (denote-rename-buffer-mode 1))
#+end_src

** Add denote exploration menu
List all denotes in the denote-directory in a convenient UI.

#+begin_src emacs-lisp
  (use-package denote-menu
    :ensure t
    :bind 
    (:map global-map
      ("C-c n a" . list-denotes)))
#+end_src

** Define front matter
We need custom front matter for specific note types.

#+begin_src emacs-lisp
  (defvar tl/front-matter-header
    (concat "#+title:      %s\n"
            "#+date:       %s\n"
            "#+filetags:   %s\n"
            "#+identifier: %s\n"))

  (defvar tl/front-matter-footer
    (concat "#+startup:    overview\n"
    	  "#+options:    toc:2\n"))

  (defun tl/assemble-front-matter (&rest contents)
    "Assemble front matter from HEADER, CONTENTS..., and FOOTER.
  Each CONTENT string will have a newline appended automatically."
    (concat tl/front-matter-header
            (mapconcat #'identity contents "\n")
            tl/front-matter-footer
            "\n"))

  (defvar tl/book-front-matter
    (tl/assemble-front-matter
     "#+author:     %%^{Author}"
     "#+year:       %%^{Year}"
     "#+isbn:       %%^{ISBN}"))

  (defvar tl/channel-front-matter
    (tl/assemble-front-matter
     "#+url:        %%^{URL}"))

  (defvar tl/area-front-matter
    (tl/assemble-front-matter))
#+end_src

** Define templates
We define template strings that are later use both in denote commands and in org capture.

#+begin_src emacs-lisp
  (defvar tl/book-template
    (concat "* TABLE OF CONTENTS :toc:\n"
            "  :PROPERTIES:\n"
            "  :auto-expand: body\n"
            "  :END:\n\n"
            "* CHAPTERS\n"
            "%?\n\n"))

  (defvar tl/channel-template
    (concat "* TABLE OF CONTENTS :toc:\n"
            "  :PROPERTIES:\n"
            "  :auto-expand: body\n"
            "  :END:\n\n"
            "* VIDEOS\n"
            "%?\n\n"))

  (defvar tl/area-template
    (concat "* TABLE OF CONTENTS :toc:\n"
            "  :PROPERTIES:\n"
            "  :auto-expand: body\n"
            "  :END:\n\n"
            "* GOALS\n"
            "%?\n\n"))
#+end_src

** Set up org capture templates
This is a very important parts of the denote (and org) system. It helps put notes into their shelves and add metadata that depends on the note category.

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    ;; Book template
    (add-to-list
     'org-capture-templates
     '("b" "Book project" plain
       (file denote-last-path)
       #'(lambda ()
           (let ((denote-use-directory tl/org-projects-path)
                 (denote-use-keywords '("book"))
                 (denote-use-template tl/book-template)
  	       (denote-org-front-matter tl/book-front-matter)
                 (denote-org-capture-specifiers nil))
             (denote-org-capture)))
       :no-save t
       :immediate-finish nil
       :kill-buffer t
       :jump-to-captured t))

    ;; Channel template
    (add-to-list
     'org-capture-templates
     '("n" "Channel project" plain
       (file denote-last-path)
       #'(lambda ()
           (let ((denote-use-directory tl/org-projects-path)
                 (denote-use-keywords '("channel"))
                 (denote-use-template tl/channel-template)
  	       (denote-org-front-matter tl/channel-front-matter)
                 (denote-org-capture-specifiers nil))
             (denote-org-capture)))
       :no-save t
       :immediate-finish nil
       :kill-buffer t
       :jump-to-captured t))

    ;; Area template
    (add-to-list
     'org-capture-templates
     '("a" "Area" plain
       (file denote-last-path)
       #'(lambda ()
           (let ((denote-use-directory tl/org-areas-path)
                 (denote-use-keywords '("area"))
                 (denote-use-template tl/area-template)
  	       (denote-org-front-matter tl/area-front-matter)
                 (denote-org-capture-specifiers nil))
             (denote-org-capture)))
       :no-save t
       :immediate-finish nil
       :kill-buffer t
       :jump-to-captured t)))

  (with-eval-after-load 'general
    (general-define-key
     :states 'normal
     "C-c c" 'org-capture))
#+end_src

* EMACS
Tweaks to Emacs configuration not relared to UI.

#+begin_src emacs-lisp
  ;; Show trailing whitespace.
  (setq show-trailing-whitespace t)
  ;; Use trash-cli rather than rm when deleting files.
  (setq delete-by-moving-to-trash t)
  ;; Don't use double space to demarkate sentences.
  (setq sentence-end-double-space nil)
#+end_src

** Backups
Control how mackups are made.

#+begin_src emacs-lisp
  ;; keep backup and save files in a dedicated directory
  (setq backup-directory-alist
        `((".*" . ,(file-name-concat user-emacs-directory "backups")))
        auto-save-file-name-transforms
        `((".*" ,(file-name-concat user-emacs-directory "backups") t)))
  ;; Backup by copying file. The safest and also the slowest aproach.
  (setq backup-by-copying t)
  ;; Do more backups.
  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+end_src

** Customize
Don't persist customizations.

#+begin_src emacs-lisp
  ;; Use a temp file as a placeholder
    (setq custom-file (make-temp-file ""))
  ;; Mark all themes as safe, since we can't persist now
  (setq custom-safe-themes t)
#+end_src

** Encoding
UTF-8 everywhere.

#+begin_src emacs-lisp
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8
        coding-system-for-read 'utf-8
        coding-system-for-write 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src

** Exit Emacs without confirmations
#+begin_src emacs-lisp
  (setq confirm-kill-emacs nil
        confirm-kill-processes nil)
#+end_src

* EVIL
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init ;; tweak evil's configuration before loading it
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-respect-visual-line-mode t)
    (setq evil-want-C-u-scroll nil)
    (setq evil-want-C-d-scroll nil)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1))
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (use-package evil-tutor
    :ensure t)
#+end_src

* COMPLETIONS
Packages that provide completion features.

** Vertico
Vertico provides only completion UI based solely on built-in Emacs facilities.

#+begin_src emacs-lisp :tangle no
  (use-package vertico
    :ensure t
    :custom
    (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))

  ;; Emacs minibuffer configurations.
  (use-package emacs
    :custom
    ;; Support opening new minibuffers from inside existing minibuffers.
    (enable-recursive-minibuffers t)
    ;; Hide commands in M-x which do not work in the current mode.  Vertico
    ;; commands are hidden in normal buffers. This setting is useful beyond
    ;; Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p)
    ;; Do not allow the cursor in the minibuffer prompt
    (minibuffer-prompt-properties
     '(read-only t cursor-intangible t face minibuffer-prompt)))

  ;; Use the `orderless' completion style.
  (use-package orderless
    :ensure t
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

* FONTS

** Defining font faces
Defining the various fonts that Emacs will use.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "Sarasa Term SC Nerd"
    :height 160
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Sarasa Term SC Nerd"
    :height 160
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "Sarasa Term SC Nerd"
    :height 160
    :weight 'medium)
  ;; Makes commented text italics.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  ;; Adjust line spacing.
  (setq-default line-spacing 0.15)
  (setq-default line-height 1.15)
#+end_src

** Zooming in/out
You can use the bindings CTRL plus =/- for zooming in/out. You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* ICONS
Adding icons to Emacs.

#+begin_src emacs-lisp
  (use-package nerd-icons
    :ensure t)
  ;; ibuffer
  (use-package nerd-icons-ibuffer
    :ensure t
    :after nerd-icons
    :config
    (add-hook 'ibuffer-mode-hook #'nerd-icons-ibuffer-mode))
  ;; dired
  (use-package nerd-icons-dired
    :ensure t
    :after nerd-icons
    :config
    (add-hook 'dired-mode-hook #'nerd-icons-dired-mode))
  ;; completions
  (use-package nerd-icons-completion
    :ensure t
    :config
    (nerd-icons-completion-mode))
#+end_src

* MODELINE
A minimalistic modeline. The Doom one is nicer, but I prefer to minimize stuff.

#+begin_src emacs-lisp
  (use-package mood-line
    :ensure t
    :config (mood-line-mode))
#+end_src

* ORG MODE
Org mode is so central to Emacs that some people use Emacs exclusively for org mode.

** Enable indent mode
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Enable table of contents
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :init (add-hook 'org-mode-hook 'toc-org-mode))
#+end_src

** Todo states
Managing todo states.

#+begin_src emacs-lisp
  ;; Disable greying out DONE headlines.
  (setq org-fontify-done-headline nil)
  ;; Automatically set parent item to DONE when children are all DONE.
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-todo-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
  (add-hook 'org-after-todo-statistics-hook #'org-summary-todo)
#+end_src

** QoL improvements
Little improvements to org-mode provided by other packages.

*** ~org-auto-tangle~: Enable autotangle
This is a QoL feature that makes it almost unnecessary to realod Emacs during configuration process. Now all you need to do is just reload config, becase tangled file will already be there.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :ensure t
    :hook (org-mode-hook . org-auto-tangle-mode))
#+end_src

*** ~org-bullets~: Enable org bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode-hook . (lambda () (org-bullets-mode 1))))
#+end_src

*** ~org-autolist~: Automatic lists
Enable autoamtic list item or checkbox creation when pressing RET.

#+begin_src emacs-lisp
  (use-package org-autolist
    :ensure t
    :hook (org-mode-hook . org-autolist-mode))
#+end_src

*** ~org-tempo~: Block tag expansion
Org-tempo is not a separate package but a module within org that can be enabled. Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag. Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |
|------------------------+-----------------------------------------|
| <el                    | '#+BEGIN_SRC emacs-lisp … '#+END_SRC    |

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src

*** ~org-tidy~: Hide property drawers
Hide property drawers on items.

#+begin_src emacs-lisp
  (use-package org-tidy
    :ensure t
    :hook (org-mode-hook . org-tidy-mode))
#+end_src

*** ~org-auto-expand~: Auto expand headings
Automatically expand specified headings.

#+begin_src emacs-lisp
  (use-package org-auto-expand
    :ensure t
    :config
    (org-auto-expand-mode))
#+end_src

* SHELL
For the sake of purity, we will be using only Eshell. For serious shell work I have ghostty installed separately.

#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :ensure t
    :after esh-mode
    :hook (eshell-mode-hool . (lambda () (setenv "TERM" "xterm-256color")))
    :config
    (eshell-syntax-highlighting-global-mode +1)
    (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
          eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
  	eshell-history-size 5000
  	eshell-buffer-maximum-lines 5000
  	eshell-hist-ignoredups t
  	eshell-scroll-to-bottom-on-input t
          eshell-destroy-buffer-when-process-dies t))
#+end_src

* SUDO
sudo-edit gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :after general
    :config
    (tl/leader
     "fu" '(sudo-edit-find-file :wk "find file as root")
     "fU" '(sudo-edit :wk "edit file as root")))
#+end_src

* THEMING
Making Emacs less bland.

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold nil
          doom-themes-enable-italic t)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    (load-theme 'doom-nord-aurora :noconfirm)
    ;; Disable bold globally.
    (mapc
     (lambda (face)
       (set-face-attribute face nil :weight 'normal :bold nil))
     (face-list)))
#+end_src

* USER INTERFACE
Let's make Emacs look a little bit better.

** Disable menubar, toolbars, and scrollbars
Disable the ugly UI.

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Disable sound
Removing distractions.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Display line numbers and truncated lines
Can't really work without line numbers.

#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode 1)
#+end_src

** Specify Emacs frame size and position
This part of configuration is specific to my home notebook, Calypso.

#+begin_src emacs-lisp
  (setq default-frame-alist
    '((top . 50)
      (left . 230)
      (width . 150)
      (height . 51)))
#+end_src

** Remove title bar
Reomove the title bar, it looks rather ugly to me, and we need as much screen estate as possible to squeeze out my small monitor.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(undecorated-round . t))
#+end_src

** Enable transparency
I like seeing my wallpapers.

#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(85 . 85))
  (add-to-list 'default-frame-alist '(alpha . (85 . 85)))
#+end_src

** Add small margins around the frame
Add some breathing room for the text.

#+begin_src emacs-lisp
  (modify-all-frames-parameters '((internal-border-width . 8)))
#+end_src

** Enable hl-line-mode
Enable global hl mode. Dark themes with low contract like the one I'm using make it hard to locate the cursor.

#+begin_src emacs-lisp
(global-hl-line-mode)
#+end_src

* WHICH-KEY
In Emacs 30, which-key was integrated into Emacs as a minor mode. We don't need to use use-package here, and almost all config remains the same as it was with separate package.

#+begin_src emacs-lisp
  (setq which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.0
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → ")
  (which-key-mode 1)
  (which-key-setup-side-window-bottom)
  ;; Fix which-key overlapping with minibuffer
  (defun fix-which-key--show-popup (orig-fn act-popup-dim)
    (let ((height (car act-popup-dim))
          (width  (cdr act-popup-dim)))
      (funcall orig-fn (cons (+ height 1) width))))
  (advice-add 'which-key--show-popup :around #'fix-which-key--show-popup)
#+end_src
